{"ast":null,"code":"import _objectSpread from \"/Users/jinyuntae/Desktop/basic_programming/University/mobile_programming/mobile-programming-public/vue-mobile-todo/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.find-index.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport TodoFooter from \"./components/TodoFooter.vue\";\nimport TodoHeader from \"./components/TodoHeader.vue\";\nimport TodoList from \"./components/TodoList.vue\";\nimport TodoInput from \"./components/TodoInput.vue\";\nexport default {\n  name: \"App\",\n  components: {\n    TodoList: TodoList,\n    TodoFooter: TodoFooter,\n    TodoHeader: TodoHeader,\n    TodoInput: TodoInput\n  },\n  data: function data() {\n    return {\n      todoItems: []\n    };\n  },\n  methods: {\n    // 할 일 상태인 것들의 개수를 구해주는 메서드\n    getTodoItemsLength: function getTodoItemsLength() {\n      return this.todoItems.filter(function (item) {\n        return item.state === \"todo\";\n      }).length;\n    },\n    // 할 일 등록\n    addTodo: function addTodo(todoItem) {\n      var title = todoItem.title,\n          memo = todoItem.memo;\n      var todoObj = {};\n\n      if (localStorage.getItem(\"todo\") && JSON.parse(localStorage.getItem(\"todo\")).length > 0) {\n        var localTodo = JSON.parse(localStorage.getItem(\"todo\"));\n        todoObj.id = localTodo[localTodo.length - 1].id + 1;\n      } else {\n        todoObj.id = 1;\n      }\n\n      todoObj = _objectSpread(_objectSpread({}, todoObj), {}, {\n        state: \"todo\",\n        title: title || \"\",\n        memo: memo || \"\"\n      });\n      this.todoItems.push(todoObj);\n      localStorage.setItem(\"todo\", JSON.stringify(this.todoItems));\n    },\n    // 할 일 완료\n    finishTodo: function finishTodo(id) {\n      this.todoItems = this.todoItems.map(function (item) {\n        if (item.id === id) {\n          return _objectSpread(_objectSpread({}, item), {}, {\n            state: \"done\"\n          });\n        } else {\n          return item;\n        }\n      });\n      localStorage.setItem(\"todo\", JSON.stringify(this.todoItems));\n    },\n    // 할 일 수정\n    updateTodo: function updateTodo(todo) {\n      var updatedTodoIndex = this.todoItems.findIndex(function (item) {\n        return item.id === todo.id;\n      });\n      this.todoItems[updatedTodoIndex] = _objectSpread(_objectSpread({}, todo), {}, {\n        state: \"todo\"\n      });\n      localStorage.setItem(\"todo\", JSON.stringify(this.todoItems));\n    },\n    // 할 일 삭제\n    removeTodo: function removeTodo(id) {\n      this.todoItems = this.todoItems.filter(function (item) {\n        return item.id !== id;\n      });\n      localStorage.setItem(\"todo\", JSON.stringify(this.todoItems));\n    },\n    // 전체삭제\n    removeAll: function removeAll() {\n      localStorage.clear();\n      this.todoItems = [];\n    }\n  },\n  // 비유하자면 파이썬 class __init__ 같은 느낌 (시작하면 로컬스토리지에서 todolist 가져옴)\n  created: function created() {\n    if (localStorage.getItem(\"todo\")) {\n      this.todoItems = JSON.parse(localStorage.getItem(\"todo\"));\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;AACA;AACA;AACA;AAEA;AACAA,aADA;AAGAC;AACAC,sBADA;AAEAC,0BAFA;AAGAC,0BAHA;AAIAC;AAJA,GAHA;AAUAC,MAVA,kBAUA;AACA;AACAC;AADA;AAGA,GAdA;AAeAC;AACA;AACAC,sBAFA,gCAEA;AACA;AAAA;AAAA;AACA,KAJA;AAMA;AACAC,WAPA,mBAOAC,QAPA,EAOA;AACA;AAAA;AAEA;;AAEA;AACA;AACAC;AACA,OAHA,MAGA;AACAA;AACA;;AAEAA;AAAAC;AAAAC;AAAAC;AAAA;AAEA;AACAC;AACA,KAvBA;AAyBA;AACAC,cA1BA,sBA0BAC,EA1BA,EA0BA;AACA;AACA;AACA;AAAAL;AAAA;AACA,SAFA,MAEA;AACA;AACA;AACA,OANA;AAOAG;AACA,KAnCA;AAqCA;AACAG,cAtCA,sBAsCAC,IAtCA,EAsCA;AACA;AAAA;AAAA;AACA;AAAAP;AAAA;AACAG;AACA,KA1CA;AA4CA;AACAK,cA7CA,sBA6CAH,EA7CA,EA6CA;AACA;AAAA;AAAA;AACAF;AACA,KAhDA;AAkDA;AACAM,aAnDA,uBAmDA;AACAN;AACA;AACA;AAtDA,GAfA;AAwEA;AACAO,SAzEA,qBAyEA;AACA;AACA;AACA;AACA;AA7EA","names":["name","components","TodoList","TodoFooter","TodoHeader","TodoInput","data","todoItems","methods","getTodoItemsLength","addTodo","todoItem","todoObj","state","title","memo","localStorage","finishTodo","id","updateTodo","todo","removeTodo","removeAll","created"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-app-bar app color=\"primary\" dark>\n      <div class=\"d-flex align-center\">\n        <v-img\n          alt=\"Vuetify Logo\"\n          class=\"shrink mr-2\"\n          contain\n          src=\"https://cdn.vuetifyjs.com/images/logos/vuetify-logo-dark.png\"\n          transition=\"scale-transition\"\n          width=\"40\"\n        />\n      </div>\n      <v-spacer></v-spacer>\n\n      <v-btn icon color=\"white\">\n        <v-icon>mdi-format-list-bulleted</v-icon>\n      </v-btn>\n    </v-app-bar>\n\n    <v-main>\n      <div class=\"main_wrapper\">\n        <TodoHeader v-bind:propsdata=\"todoItems\" />\n        <TodoList\n          v-bind:propsdata=\"todoItems\"\n          @finishTodo=\"finishTodo\"\n          @updateTodo=\"updateTodo\"\n          @removeTodo=\"removeTodo\"\n        ></TodoList>\n        <TodoFooter v-if=\"getTodoItemsLength() > 0\" v-on:removeAll=\"removeAll\" />\n      </div>\n    </v-main>\n    <TodoInput v-on:addTodo=\"addTodo\"></TodoInput>\n  </v-app>\n</template>\n\n<script>\nimport TodoFooter from \"./components/TodoFooter.vue\";\nimport TodoHeader from \"./components/TodoHeader.vue\";\nimport TodoList from \"./components/TodoList.vue\";\nimport TodoInput from \"./components/TodoInput.vue\";\n\nexport default {\n  name: \"App\",\n\n  components: {\n    TodoList,\n    TodoFooter,\n    TodoHeader,\n    TodoInput,\n  },\n\n  data() {\n    return {\n      todoItems: [],\n    };\n  },\n  methods: {\n    // 할 일 상태인 것들의 개수를 구해주는 메서드\n    getTodoItemsLength() {\n      return this.todoItems.filter((item) => item.state === \"todo\").length;\n    },\n\n    // 할 일 등록\n    addTodo(todoItem) {\n      const { title, memo } = todoItem;\n\n      let todoObj = {};\n\n      if (localStorage.getItem(\"todo\") && JSON.parse(localStorage.getItem(\"todo\")).length > 0) {\n        const localTodo = JSON.parse(localStorage.getItem(\"todo\"));\n        todoObj.id = localTodo[localTodo.length - 1].id + 1;\n      } else {\n        todoObj.id = 1;\n      }\n\n      todoObj = { ...todoObj, state: \"todo\", title: title || \"\", memo: memo || \"\" };\n\n      this.todoItems.push(todoObj);\n      localStorage.setItem(\"todo\", JSON.stringify(this.todoItems));\n    },\n\n    // 할 일 완료\n    finishTodo(id) {\n      this.todoItems = this.todoItems.map((item) => {\n        if (item.id === id) {\n          return { ...item, state: \"done\" };\n        } else {\n          return item;\n        }\n      });\n      localStorage.setItem(\"todo\", JSON.stringify(this.todoItems));\n    },\n\n    // 할 일 수정\n    updateTodo(todo) {\n      const updatedTodoIndex = this.todoItems.findIndex((item) => item.id === todo.id);\n      this.todoItems[updatedTodoIndex] = { ...todo, state: \"todo\" };\n      localStorage.setItem(\"todo\", JSON.stringify(this.todoItems));\n    },\n\n    // 할 일 삭제\n    removeTodo(id) {\n      this.todoItems = this.todoItems.filter((item) => item.id !== id);\n      localStorage.setItem(\"todo\", JSON.stringify(this.todoItems));\n    },\n\n    // 전체삭제\n    removeAll() {\n      localStorage.clear();\n      this.todoItems = [];\n    },\n  },\n\n  // 비유하자면 파이썬 class __init__ 같은 느낌 (시작하면 로컬스토리지에서 todolist 가져옴)\n  created() {\n    if (localStorage.getItem(\"todo\")) {\n      this.todoItems = JSON.parse(localStorage.getItem(\"todo\"));\n    }\n  },\n};\n</script>\n\n<style>\nhtml {\n  height: 100vh;\n  overflow: hidden !important;\n}\nbody {\n  height: 100%;\n  text-align: center;\n  background-color: #f6f6f8;\n}\n#app {\n  height: 100%;\n}\n.v-main {\n  height: 100%;\n  padding: 0 !important;\n  margin: 56px 0px 88px 0px !important; \n}\n.main_wrapper {\n  height: calc(100% - 56px - 88px);\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n.shadow {\n  -webkit-box-shadow: 0px 0px 5px 0px rgba(181,181,181,1);\n  -moz-box-shadow: 0px 0px 5px 0px rgba(181,181,181,1);\n  box-shadow: 0px 0px 5px 0px rgba(181,181,181,1);\n}\n</style>\n\n"]},"metadata":{},"sourceType":"module"}